int trackchars(char openchar, char closechar, int ifthisis0youclosedit[], int counter,
               int maxcount, int opencolumn[], int openline[], int closecolumn[],
               int closeline[], int extraclosedtrackingarray[])
{



int parencount = 0;                     /*parencount stores which parenthesis we are on*/
int maxparenthesis = 0;                 /*the highest number of parenthesis we opened as we count up*/
int parenthesis[MAXCHARS];              /*array for storing whether parenthesis are balanced - should ++ when there is an open parenthesis, and -- when there is a closed parenthesis*/
int extra_closed_parenthesis[MAXCHARS]; /*array for storing how many extra closed parenthesis there are*/
int location_parenopen_column[MAXCHARS];    /*array for storing column of opening parenthesis*/
int location_parenopen_line[MAXLINES];      /*array for storing line of opening parenthesis*/
int location_parenclose_column[MAXCHARS];   /*array for storing column of closing parenthesis*/
int location_parenclose_line[MAXLINES];     /*array for storing column of closing parenthesis*/

int curlycount = 0;                     /*curlycount stores which curly braces we are on*/
int maxcurly = 0;                       /*the highest number of curly braces we opened as we count up*/
int curlybraces[MAXCHARS];              /*array for storing whether curly braces are balanced - should ++ when there is an open curly brace, and -- when there is a closed curlybrace*/
int extra_closed_curlybraces[MAXCHARS]; /*array for storing how many extra closed curly braces there are*/
int location_curlyopen_column[MAXCHARS];    /*array for storing column of opening curly braces*/
int location_curlyopen_line[MAXLINES];      /*array for storing line of opening curly braces*/
int location_curlyclose_column[MAXCHARS];   /*array for storing column of closing curly braces*/
int location_curlyclose_line[MAXLINES];     /*array for storing column of closing curly braces*/

int bracketcount = 0;                     /*bracketcount stores which brackets we are on*/
int maxbracket = 0;                       /*the highest number of brackets we opened as we count up*/
int brackets[MAXCHARS];              /*array for storing whether brackets are balanced - should ++ when there is an open bracket brace, and -- when there is a closed bracketbrace*/
int extra_closed_brackets[MAXCHARS]; /*array for storing how many extra closed brackets there are*/
int location_bracketopen_column[MAXCHARS];    /*array for storing column of opening brackets*/
int location_bracketopen_line[MAXLINES];      /*array for storing line of opening brackets*/
int location_bracketclose_column[MAXCHARS];   /*array for storing column of closing brackets*/
int location_bracketclose_line[MAXLINES];     /*array for storing column of closing brackets*/

int quotecount = 0;                     /*quotecount stores which quotes we are on*/
int maxquote = 0;                       /*the highest number of quotes we opened as we count up*/
int quotes[MAXCHARS];              /*array for storing whether quotes are balanced - should ++ when there is an open quote, and -- when there is a closed quote*/
int extra_closed_quotes[MAXCHARS]; /*array for storing how many extra closed quotes there are*/
int location_quoteopen_column[MAXCHARS];    /*array for storing column of opening quotes*/
int location_quoteopen_line[MAXLINES];      /*array for storing line of opening quotes*/
int location_quoteclose_column[MAXCHARS];   /*array for storing column of closing quotes*/
int location_quoteclose_line[MAXLINES];     /*array for storing column of closing quotes*/


int trackchars(char openchar, char closechar, int ifthisis0youclosedit[], int counter,
               int maxcount, int opencolumn[], int openline[], int closecolumn[],
               int closeline[], int extraclosedtrackingarray[])
{
    if (program[line][column] == openchar) /*if we have an open character*/
    {
        ifthisis0youclosedit[counter]++; /*count up in the array for that character, the number of open characters we're on. */
        if (maxcount < counter)          /*keep track of the highest number parenthesis ever hit so we know how far to print at the end*/
        {
            maxcount = counter;
        }
        opencolumn[counter] = column; /*store the column coordinate of the nth opened char in the location array*/
        openline[counter] = line;     /*store the line coordinate of the nth opened char in the location array*/
        printf("DEBUG %d OPEN %c FOUND: counter is %d, program[linearray[%d]][columnarray[%d]] is %c, program[%d][%d] is %c \n\n",
               __LINE__, openchar, counter, openline[counter], opencolumn[counter], openchar,
               line, column, program[line][column]);
        counter++;  /*iterate p up so that the next time we see an open parenthesis, it is seen as the 2nd, 3rd, 4th, etc.*/
        return OUT; /*break out of the while loop I am running this under*/
    }
    else if (program[line][column] == closechar) /*if we have a closed char */
    {

        counter--; /*iterate counter down so that we are closing the last char we opened. */

        if (counter < 0)
        {
            extraclosedtrackingarray[(-counter)]++;
        }
        else
        {
            ifthisis0youclosedit[counter]--; /*count down in the tracking array for the number char we are on*/
        }

        closecolumn[counter] = column; /*store the column coordinate of the nth closed char in the location array*/
        closeline[counter] = line;     /*store the line coordinate of the nth closed char in the location array*/

        printf("DEBUG %d CLOSE %c FOUND: counter is %d, program[linearray[%d]][columnarray[%d]] is %c, program[%d][%d] is %c \n\n",
               __LINE__, closechar, counter, closeline[counter],
               closecolumn[counter], closechar,
               line, column, program[line][column]);

        return OUT; /*break out of the while loop I am running this under*/
    }
    else
    {
        return IN; /*end this function*/
    }
}
