#include <stdio.h>
#include <stdlib.h>
// commented out debug output on line 83, 93, 95, 116, 120, 129, 139, 141, 162, 166, 190, 210, 407
#define MAXCHARS 1000
#define MAXLINES 1000
#define MAXFILENAME 100
#define IN 0  // are we in a comment?
#define OUT 1 // are we out of a comment?
#define YES 1
#define NO 0

int linecountinput = 0;          // keep track of what line we are on in our string array while copying input file to it
int howlongisthisline[MAXLINES]; // for each line, how long is it

int line = 0;                     // line stores what line we are on when iterating through the program
int column = 0;                   // column stores what character we are on when iterating through the program
char program[MAXLINES][MAXCHARS]; // array of strings we will store the file with comments in

int areweinastring = OUT; // are we in a string
int stringliteral = OUT;  // keep track of whether we're " " quotes
int charliteral = OUT;    // keep track of whether we're in ' ' quotes

int weare__acomment = OUT;           // keep track of whether we're in a comment
int weare__asinglelinecomment = OUT; // keep track of whether we're on a single comment so we can reset it on the next line
int didweescapenewline = NO;

/*the parenthesis[] array keeps track of whether parenthesis are balanced. let parenthesis[0] be the
first parenthesis. When an ( is found, parenthesis[0]++ will occur, which brings it to 1. If a ) shows up,
parenthesis[0]-- will happen, which brings it to a 0. If any of these is a 1, or a negative one,
it means that parenthesis is out of balance, and should be looked at. Same for arrays for other character types */

int parencount = 0;                             // parencount stores which parenthesis we are on
int parenclosecount = 0;                        // parencount stores which EXCESS closed parenthesis we are on
int maxparenthesis = 0;                         // the highest number of parenthesis we opened as we count up
int maxextraclosedparenthesis = 0;              // the highest number of EXCESS closed parenthesis
int parenthesis[MAXCHARS] = {0};                // array for storing whether parenthesis are balanced - should ++ when there is an open parenthesis, and -- when there is a closed parenthesis
int extra_closed_parenthesis[MAXCHARS] = {0};   // array for storing how many extra closed parenthesis there are
int location_parenopen_column[MAXCHARS] = {0};  // array for storing column of opening parenthesis
int location_parenopen_line[MAXLINES] = {0};    // array for storing line of opening parenthesis
int location_parenclose_column[MAXCHARS] = {0}; // array for storing column of closing parenthesis
int location_parenclose_line[MAXLINES] = {0};   // array for storing column of closing parenthesis

int curlycount = 0; // curlycount stores which curly braces we are on
int curlyclosecount = 0;
int maxcurly = 0;                               // the highest number of curly braces we opened as we count up
int maxextraclosedcurlybraces = 0;              // the highest number of EXCESS closed curly braces
int curlybraces[MAXCHARS] = {0};                // array for storing whether curly braces are balanced - should ++ when there is an open curly brace, and -- when there is a closed curlybrace
int extra_closed_curlybraces[MAXCHARS] = {0};   // array for storing how many extra closed curlybraces there are
int location_curlyopen_column[MAXCHARS] = {0};  // array for storing column of opening curly braces
int location_curlyopen_line[MAXLINES] = {0};    // array for storing line of opening curly braces
int location_curlyclose_column[MAXCHARS] = {0}; // array for storing column of closing curly braces
int location_curlyclose_line[MAXLINES] = {0};   // array for storing column of closing curly braces

int bracketcount = 0; // bracketcount stores which brackets we are on
int bracketclosecount = 0;
int maxbracket = 0;                               // the highest number of brackets we opened as we count up
int maxextraclosedbrackets = 0;                   // the highest number of EXCESS closed brackets
int brackets[MAXCHARS] = {0};                     // array for storing whether brackets are balanced - should ++ when there is an open bracket brace, and -- when there is a closed bracketbrace
int extra_closed_brackets[MAXCHARS] = {0};        // array for storing how many extra closed brackets there are
int location_bracketopen_column[MAXCHARS] = {0};  // array for storing column of opening brackets
int location_bracketopen_line[MAXLINES] = {0};    // array for storing line of opening brackets
int location_bracketclose_column[MAXCHARS] = {0}; // array for storing column of closing brackets
int location_bracketclose_line[MAXLINES] = {0};   // array for storing column of closing brackets

int quotecount = 0; // quotecount stores which quotes we are on
int quoteclosecount = 0;
int maxquote = 0;                               // the highest number of quotes we opened as we count up
int maxextraclosedquotes = 0;                   // the highest number of EXCESS closed quotes
int quotes[MAXCHARS] = {0};                     // array for storing whether quotes are balanced - should ++ when there is an open quote, and -- when there is a closed quote
int extra_closed_quotes[MAXCHARS] = {0};        // array for storing how many extra closed quotes there are
int location_quoteopen_column[MAXCHARS] = {0};  // array for storing column of opening quotes
int location_quoteopen_line[MAXLINES] = {0};    // array for storing line of opening quotes
int location_quoteclose_column[MAXCHARS] = {0}; // array for storing column of closing quotes
int location_quoteclose_line[MAXLINES] = {0};   // array for storing column of closing quotes

// FUNCTION FOR KEEPING TRACK OF SOMETHING

// COUNTING & KEEPING TRACK OF PARENTHESIS, BRACKETS, CURLY BRACES - WHATEVER YOU WANT, THIS DOES IT!
void trackchars(char openchar, char closechar, int *counter, int *closecounter,
                int *maxcount, int *maxclosed, int ifthisis0youclosedit[], int extraclosedtrackingarray[],
                int opencolumn[], int openline[], int closecolumn[], int closeline[])
{
    //    printf("debug line %d before if in function, program[%d][%d] is %c \n", __LINE__, line, column, program[line][column]);
    if (program[line][column] == openchar) // if we have an open character
    {
        ifthisis0youclosedit[*counter]++; // count up in the array for that character, the number of open characters we're on.
        if (*maxcount < *counter)         // keep track of the highest number char ever hit so we know how far to print at the end
        {
            *maxcount = *counter;
        }
        opencolumn[*counter] = column; // store the column coordinate of the nth opened char in the location array
        openline[*counter] = line;     // store the line coordinate of the nth opened char in the location array
                                       // printf("DEBUG LINE %d OPEN %c FOUND: *counter is %d, ifthisis0youclosedit[%d] is %d, program[%d][%d] is %c \n\n", __LINE__, openchar, *counter, *counter, ifthisis0youclosedit[*counter], openline[*counter], opencolumn[*counter], program[openline[*counter]][opencolumn[*counter]]);
        (*counter)++;                  // iterate counter up so that the next time we see an open char, it is seen as the 2nd, 3rd, 4th, etc.
                                       // printf("DEBUG %d did *counter go up after detecting an opening parenthesis? *counter is %d\n\n",__LINE__, *counter);
    }
    else if (program[line][column] == closechar) // if we have a closed char
    {
        (*counter)--; // iterate *counter down so that we are closing the last char we opened.

        if (*counter < 0)
        {
            extraclosedtrackingarray[*closecounter]++;
            (*closecounter)++;
            *maxclosed = *closecounter;
            *counter = 0;
        }
        else
        {
            ifthisis0youclosedit[*counter]--; // count down in the tracking array for the number char we are on
        }

        closecolumn[*closecounter] = column; // store the column coordinate of the nth closed char in the location array
        closeline[*closecounter] = line;     // store the line coordinate of the nth closed char in the location array

        // printf("DEBUG %d CLOSED %c FOUND: *counter is %d, ifthisis0youclosedit[%d] is %d, extraclosedtrackingarray[%d] is %d, program[%d][%d] is %c \n\n", __LINE__, closechar, *counter, *counter, ifthisis0youclosedit[*counter], *closecounter, extraclosedtrackingarray[abs(*closecounter)], closeline[*counter], closecolumn[*counter], program[closeline[*counter]][closecolumn[*counter]]);
    }
    else
    {
        // printf("debug line %d ending else in function\n", __LINE__);
    }
}

// COUNTING & KEEPING TRACK OF QUOTES.
void trackquotes(char openchar, char closechar, int *counter, int *closecounter,
                 int *maxcount, int *maxclosed, int ifthisis0youclosedit[], int extraclosedtrackingarray[],
                 int opencolumn[], int openline[], int closecolumn[], int closeline[])
{
    //   printf("debug line %d before if in function, program[%d][%d] is %c, program[%d][%d] is %c\n", __LINE__, line, column, program[line][column], line, column + 1, program[line][column + 1]);
    if (program[line][column + 1] == openchar) // if we have an open character
    {
        ifthisis0youclosedit[*counter]++; // count up in the array for that character, the number of open characters we're on.
        if (*maxcount < *counter)         // keep track of the highest number char ever hit so we know how far to print at the end
        {
            *maxcount = *counter;
        }
        opencolumn[*counter] = column + 1; // store the column coordinate of the nth opened char in the location array
        openline[*counter] = line;         // store the line coordinate of the nth opened char in the location array
                                           //      printf("DEBUG LINE %d OPEN %c QUOTE FOUND: *counter is %d, ifthisis0youclosedit[%d] is %d, program[%d][%d] is %c, program[%d][%d] is %c  \n\n", __LINE__, openchar, *counter, *counter, ifthisis0youclosedit[*counter], openline[*counter], opencolumn[*counter], program[openline[*counter]][opencolumn[*counter]], openline[*counter], opencolumn[*counter] + 1, program[openline[*(counter)]][opencolumn[*counter] + 1]);
        (*counter)++;                      // iterate counter up so that the next time we see an open char, it is seen as the 2nd, 3rd, 4th, etc.
        //       printf("DEBUG %d did *counter go up after detecting an opening QUOTE? *counter is %d\n\n", __LINE__, *counter);
    }
    else if (program[line][column] == closechar) // if we have a closed char
    {
        (*counter)--; // iterate *counter down so that we are closing the last char we opened.

        if (*counter < 0)
        {
            extraclosedtrackingarray[*closecounter]++;
            (*closecounter)++;
            *maxclosed = *closecounter;
            *counter = 0;
        }
        else
        {
            ifthisis0youclosedit[*counter]--; // count down in the tracking array for the number char we are on
        }

        closecolumn[*closecounter] = column; // store the column coordinate of the nth closed char in the location array
        closeline[*closecounter] = line;     // store the line coordinate of the nth closed char in the location array

        //       printf("DEBUG %d CLOSED %c QUOTE FOUND: *counter is %d, ifthisis0youclosedit[%d] is %d, extraclosedtrackingarray[%d] is %d, program[%d][%d] is %c, program[%d][%d] is %c  \n\n", __LINE__, closechar, *counter, *counter, ifthisis0youclosedit[*counter], *closecounter, extraclosedtrackingarray[abs(*closecounter)], closeline[*counter], closecolumn[*counter], program[closeline[*counter]][closecolumn[*counter]], closeline[*counter], closecolumn[*counter], program[closeline[*counter]][closecolumn[*counter]]);
    }
    else
    {
        //     printf("debug line %d ending else in function\n", __LINE__);
    }
}

// FUNCTION TO PRINT THE LOCATION OF THE ERRORS IN SYNTAX OF CODE AFTER FINDING THEM

int printerrors(int ifthisis0youclosedit[], int maxcount, int openline[], int opencolumn[],
                int closeline[], int closecolumn[], int extraclosedtrackingarray[], int maxclosed,
                char openchar, char closechar)
{
    int sum_open_errors = 0;
    int sum_closed_errors = 0;
    int sum_errors = 0;

    for (int whichp = 0; whichp <= maxcount; whichp++)
    {
        if (ifthisis0youclosedit[whichp] != 0)
        {
            printf("There's a mismatched %c on line %d: \n\n", openchar, openline[whichp] + 1);
            int endofline = 0;
            while ((program[openline[whichp]][endofline] != '\0') && (endofline < MAXCHARS - 2))
            {
                // printf("DEBUGline %d: endofline is %d, program[openline[whichp]][endofline] is program[%d][%d] is %c and program[openline[whichp]][endofline + 1] is program[%d][%d] is %c\n", __LINE__, endofline, openline[whichp], endofline, program[openline[whichp]][endofline], openline[whichp], endofline + 1, program[openline[whichp]][endofline + 1]);
                endofline++;
            }
            //         printf("%d debugoutput ifthisis0youclosedit[%d] is %d\n", __LINE__, whichp, ifthisis0youclosedit[whichp]);
            for (int charsforcontext = (opencolumn[whichp] >= 10 ? opencolumn[whichp] - 10 : 0); charsforcontext < (opencolumn[whichp] <= endofline - 11 ? opencolumn[whichp] + 10 : endofline); charsforcontext++)
            {
                printf("%c", program[openline[whichp]][charsforcontext]);
            }
            printf("\n\nLook for the code above on line %d and tell me if you find your problem with the location of the %c characters. \n\n", openline[whichp] + 1, openchar); /*make it neat*/
        }
    }

    for (int whichp = 0; whichp <= maxclosed; whichp++)
    {
        if (extraclosedtrackingarray[whichp] != 0)
        {
            printf("There's a mismatched %c on line %d: \n\n", closechar, closeline[whichp] + 1);
            int endofline = 0;
            while ((program[closeline[whichp]][endofline] != '\0') && (endofline < MAXCHARS - 2))
            {
                // printf("DEBUG %d: endofline is %d, program[closeine[whichp]][endofline] is program[%d][%d] is %c and program[closeline[whichp]][endofline + 1] is program[%d][%d] is %c\n", __LINE__, endofline, closeline[whichp], endofline, program[closeline[whichp]][endofline], closeline[whichp], endofline + 1, program[closeline[whichp]][endofline + 1]);
                endofline++;
            }
            //           printf("DEBUGOUTPUT line %d endofline is %d\n", __LINE__, endofline);
            //         printf("%d debugoutput extraclosedtrackingarray[%d] is %d\n", __LINE__, whichp, extraclosedtrackingarray[whichp]);
            for (int charsforcontext = (closecolumn[whichp] >= 10 ? closecolumn[whichp] - 10 : 0); charsforcontext < (closecolumn[whichp] <= endofline - 11 ? closecolumn[whichp] + 10 : endofline); charsforcontext++)
            {
                printf("%c", program[closeline[whichp]][charsforcontext]);
                //            printf("debugline %d endofline is %d, charsforcontext is %d, closecolumn[whichp] is %d\n", __LINE__, endofline, charsforcontext, closecolumn[whichp]);
            }
            printf("\n\nLook for the code above on line %d and tell me if you find your problem with the location of the %c characters. \n\n", closeline[whichp] + 1, closechar); // make it neat
        }
    }

    for (int i = 0; i <= maxcount; i++)
    {
        sum_open_errors += ifthisis0youclosedit[i];
    }
    for (int i = 0; i <= maxclosed; i++)
    {
        sum_closed_errors += extraclosedtrackingarray[i];
    }
    if ((sum_open_errors + sum_closed_errors) == 0)
        printf("It looks like your %c and %c are balanced just fine! No errors here.\n", openchar, closechar);
}

// FUNCTION TO KEEP TRACK OF WHETHER WE ARE, OR ARE NOT, INSIDE OF A STRING, WHEN LOOKING FOR COMMENTS.

int stringinorout(int keeptrackofstring, int keeptrackofchar, char currentchar, char previouschar, int comment)
{

    static int escaped = NO;
    /*handle trolls that put a \ at the end of the line.
    400 lines of code for every use case and it didn't handle a troll
    putting a \ at the end of a line, escaping the newline character and tricking my
    program into thinking we are automatically out of a string because we hit enter on a
    newline. */

    if (previouschar == '\\' && !escaped)
    {
        escaped = YES;
    }
    else if (escaped == YES)
    {
        escaped = NO;
    }

    if ((currentchar == '\n') && (previouschar == '\\') && comment == OUT)
    {
        escaped = OUT;
        didweescapenewline = YES;
    }

    // Handle strings in double quotes, only outside of comments
    if (currentchar == '\"' && !(comment == IN) && !(keeptrackofchar == IN) && !(escaped == YES))
    {
        keeptrackofstring = (keeptrackofstring == OUT) ? IN : OUT;
        stringliteral = keeptrackofstring;
    }

    // Handle characters in single quotes, only outside of comments
    if (currentchar == '\'' && !(comment == IN) && !(keeptrackofstring == IN) && !(escaped == YES))
    {
        keeptrackofchar = (keeptrackofchar == OUT) ? IN : OUT;
        charliteral = keeptrackofchar;
    }

    // Return IN if inside a string or char literal, OUT otherwise
    return (keeptrackofstring == IN || keeptrackofchar == IN) ? IN : OUT;
}

// FUNCTION TO OPEN A FILE FOR PROCESSING & REMOVING COMMENTS FROM

FILE *openfile()
{
    char inputfilename[MAXFILENAME]; // this will be where we store the name of our input file
    int i = 0;                       // use for looping to collect input from user
    // ASK THE USER WHAT FILE THEY WANT TO WORK ON
    printf("What is the name of the INPUT file you wish to check for imbalanced parenthesis?\n\n");
    while ((i < MAXFILENAME - 1) && (inputfilename[i] = getc(stdin)) != EOF)
    { // have user type in input filename
        if (inputfilename[i] != '\n')
        { // take user input into filename before they hit enter
            i++;
        }
        else
        {
            inputfilename[i] = '\0'; // null terminate filename character array once user hits enter
            break;                   // end acceptance of while loop that accepts user input into filename[] once they hit enter
        }
    }

    // OPEN THE FILE THE USER HAS CHOSEN TO WORK ON

    FILE *openedfile = fopen(inputfilename, "r");                        // open file specified above and assign to *program pointer
    printf("The filename you want me to open is %s\n\n", inputfilename); // Confirm I am opening the correct file

    if (openedfile == NULL)
    { // error handling if it cannot open the file
        perror("Error opening file");
    }
    else
    {
        printf("%p is open, that's filename: %s\n\n", (void *)openedfile, inputfilename); // tell me the file as a memory address & filename if it did open
        return openedfile;                                                                // return the program to the function so that we have an open file in our program after using this
    }
}

// FUNCTION FOR CREATING A FILE TO SAVE THE PROCESSED, UNCOMMENTED CODE TO

FILE *savefile()
{

    char outputfilename[MAXFILENAME]; // this will be where we store the name of our output file
    int i = 0;                        // use for looping to collect input from user
    // ASK THE USER WHAT FILE THEY WANT TO SAVE TO
    printf("What is the name of the OUTPUT file you wish to save your uncommented code to in this directory?\n\n");
    while ((i < MAXFILENAME - 1) && (outputfilename[i] = getc(stdin)) != EOF)
    { // have user type in filename to save to
        if (outputfilename[i] != '\n')
        { // take user input into filename before they hit enter
            i++;
        }
        else
        {
            outputfilename[i] = '\0'; // null terminate filename character array once user hits enter
            break;                    // end acceptance of while loop that saves program output
        }
    }

    // If file is good, tell the user & return it to the function call

    FILE *outputfile = fopen(outputfilename, "w");                              // open file specified above and assign to *program pointer
    printf("The filename you want me to save to is is %s\n\n", outputfilename); // Confirm I am opening the correct file

    if (outputfile == NULL)
    { // error handling if it cannot open the file
        perror("Error creating file");
    }
    else
    {
        printf("%p is open, that's filename: %s and is ready for writing\n\n", (void *)outputfile, outputfilename); // tell me the file as a memory address & filename if it did open
        return outputfile;                                                                                          // return the program to the function so that we have an open file in our program after using this
    }
}

// FUNCTION FOR COPYING PROGRAM FROM FILE TO program[] ARRAY SO WE CAN PROCESS IT WITHIN THIS PROGRAM

void filetoarray(FILE *file)
{
    char array[MAXLINES][MAXCHARS];     // array we will store each line of file to
    int linelength = 0;                 // how long each line I am taking from my file is
    int wheretoplacenullterminator = 0; // where to place null terminator as we copy each line
    char filetempcontents[MAXCHARS];    // this is where we store the text of our file as we read it line by line temporarily

    while (fgets(filetempcontents, MAXCHARS - 2, file) != NULL)
    {
        linelength = 0;
        while (filetempcontents[linelength] != '\0')
        {
            if (linelength < MAXLINES - 2)
            {
                linelength++;
            }
        }
        for (int charposition = 0; charposition <= linelength; charposition++) // copy the contents of each line of the file over to a line in our string array
        {
            program[linecountinput][charposition] = filetempcontents[charposition];
            wheretoplacenullterminator = charposition;
        }
        program[linecountinput][wheretoplacenullterminator] = '\0';         // place null terminator at the end of each line
        howlongisthisline[linecountinput] = wheretoplacenullterminator + 1; // keep track of the length of each line

        if (linecountinput < MAXLINES - 2)
        {
            linecountinput++; // each time the while loop loops we're on a new line, so iterate the line we're on in the string array
        }
        else
        {
            break;
        }
    }
}

void main()
{
    FILE *inputfile = openfile(); // get input file
    filetoarray(inputfile);       // copy contents of program to program[] char array

    // WE BEGIN LOOKING THROUGH OUR INPUT FILE BELOW

    for (line = 0; line < linecountinput; line++) // go through each line of the program and iterate upwards once at the end
    {
        if ((weare__asinglelinecomment == IN) && (didweescapenewline == NO)) // singleline comments do not persist to the next line. Once we're on a new line,

        {
            weare__asinglelinecomment = OUT;
        }
        for (column = 0; column < howlongisthisline[line]; column++)
        {

            areweinastring = stringinorout(stringliteral, charliteral, program[line][column], program[line][column - 1], weare__acomment); // Keep track of whether we're in a string literal
      //  printf("DEBUG line %d: program[%d][%d] is %c, areweinastring is %d, stringliteral is %d, charliteral is %d, comment is %d, singlelinecomment is %d, parencount/counter is %d, extra_closed_parenthesis[%d] is %d\n", __LINE__, line, column, program[line][column], areweinastring, stringliteral, charliteral, weare__acomment, weare__asinglelinecomment, parencount, abs(parencount), extra_closed_parenthesis[abs(parencount)]); //DEBUGOUTPUT
            if (weare__acomment == IN)
            {
                while (weare__acomment == IN) // this is for when we are still in a multiline comment as we enter a new line. find the end of the comment!
                {
                    if ((program[line][column] == '*') && (program[line][column + 1] == '/') && (areweinastring == OUT))
                    {
                        if (column < MAXCHARS - 3)
                        {
                            column = column + 2; // skip past the comment
                        }
                        weare__acomment = OUT; // mark us as OUT of a comment
                    }
                    else
                    {
                        if (column < MAXCHARS - 3)
                        {
                            column++; // keep moving forward
                        }
                        else
                        {
                            break;
                        }
                    }
                }
            }

            // count each character per line, iterate upwards
            if (((program[line][column] == '/') && (program[line][column + 1] == '/')) && ((weare__acomment == OUT)) && (areweinastring == OUT))
            {                                   // we're in a comment, ignore
                weare__asinglelinecomment = IN; // we are in a single line comment
                break;                          // go to the next line and go from there, nothing to see here
            }
            else if ((program[line][column] == '/') && (program[line][column + 1] == '*'))
            { // we're in a comment, skip over
                weare__acomment = IN;
                while (weare__acomment == IN)
                {
                    if ((program[line][column] == '*') && (program[line][column + 1] == '/'))
                    {
                        if (column < MAXCHARS - 2)
                        {
                            column = column + 2; // skip past the comment
                        }
                        weare__acomment = OUT; // mark us as OUT of a comment
                    }
                    else
                    {
                        if (column < MAXCHARS - 2)
                        {
                            column++; // keep moving forward
                        }
                        else
                        {
                            break;
                        }
                    }
                }
            }
            // when not in a comment or a string, we check if the character is a (, ), [, ], {, }, and keep count of it!
            if ((weare__acomment == OUT) && (areweinastring == OUT))
            {
                trackchars('(', ')', &parencount, &parenclosecount,
                           &maxparenthesis, &maxextraclosedparenthesis,
                           parenthesis, extra_closed_parenthesis,
                           location_parenopen_column, location_parenopen_line,
                           location_parenclose_column, location_parenclose_line);

                trackchars('{', '}', &curlycount, &curlyclosecount,
                           &maxcurly, &maxextraclosedcurlybraces,
                           curlybraces, extra_closed_curlybraces,
                           location_curlyopen_column, location_curlyopen_line,
                           location_curlyclose_column, location_curlyclose_line);

                trackchars('[', ']', &bracketcount, &bracketclosecount,
                           &maxbracket, &maxextraclosedbrackets,
                           brackets, extra_closed_brackets,
                           location_bracketopen_column, location_bracketopen_line,
                           location_bracketclose_column, location_bracketclose_line);

                trackquotes('\"', '\"', &quotecount, &quoteclosecount,
                            &maxquote, &maxextraclosedquotes,
                            quotes, extra_closed_quotes,
                            location_quoteopen_column, location_quoteopen_line,
                            location_quoteclose_column, location_quoteclose_line);
            }
        }
    }

    /*print character status at the end, along with a guess as to
    which line has mismatched characters most needing to be fixed.
    so the programmer can find it. for each entry in the array, we want to:

    1) check if it's a 0, meaning no fuckup.
    2) if it isn't 0, that means that set of characters is the one off balance.
    3) print what is near the opening/closing ones that are off balance,
    as well as the line number so the programmer knows where to look for their bug
*/

    printerrors(parenthesis, maxparenthesis,
                location_parenopen_line, location_parenopen_column,
                location_parenclose_line, location_parenclose_column,
                extra_closed_parenthesis, maxextraclosedparenthesis, '(', ')');

    printerrors(curlybraces, maxcurly,
                location_curlyopen_line, location_curlyopen_column,
                location_curlyclose_line, location_curlyclose_column,
                extra_closed_curlybraces, maxextraclosedcurlybraces, '{', '}');

    printerrors(brackets, maxbracket,
                location_bracketopen_line, location_bracketopen_column,
                location_bracketclose_line, location_bracketclose_column,
                extra_closed_brackets, maxextraclosedbrackets, '[', ']');

    printerrors(quotes, maxquote,
                location_quoteopen_line, location_quoteopen_column,
                location_quoteclose_line, location_quoteclose_column,
                extra_closed_quotes, maxextraclosedquotes, '\"', '\"');

    printf("\n\n");
}
